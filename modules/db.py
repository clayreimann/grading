#
# A module for accessing the database
# The following functions must be provided for the site to function
#
#   CRUD (add, get, mod, del):
#     - user
#     - course
#     - semester
#     - assignment
#     - grade
#   Autentication
#     - auth_user
#
# Changes:
#   * 08/08 CBR - created
#   * 08/17 CBR - updating for new database schema
#

from pymysql import connect
from pymysql import Error
from pymysql.cursors import DictCursor

from hashlib import sha256
from datetime import datetime
from uuid import uuid4

def db_connect(host="localhost", db="Grading", un="grader", pw="grades"):
  """
    Get a connection to the database that commits our transactions as we
    complete them.
    The cursor returns rows as dictionaries.
  """
  con = connect(host=host, db=db, user=un, passwd=pw)
  con.autocommit(True)
  return con.cursor(DictCursor)

####################
# Course functions
# Couse table:
# CREATE TABLE Grading.Courses(
#   ID Char(38), # generated by "C_" + uuid.uuid4()
#   CourseNumber Char(7) UNIQUE,
#   PRIMARY KEY(ID),
#   INDEX(CourseNumber)
# ) ENGINE=InnoDB;
####################

def all_courses():
  """
    Returns a list of all the courses
  """
  sql = db_connect()

  sql.execute("SELECT * FROM Courses ORDER BY CourseNumber")
  ret = sql.fetchall()

  sql.close()

  return ret

def add_course(courseNum):
  """
    Add a course
  """
  guid = "C_" + str(uuid4())
  cols = "ID, CourseNumber"
  vals = "'{}', '{}'".format(guid, str(courseNum).upper())
  query = "INSERT INTO Courses ({}) VALUES({})".format(cols, vals)

  ret = False
  sql = db_connect()
  try:
    ret = True if sql.execute(query) == 1 else False
  except Error as e:
    ret = False
  sql.close()

  return ret

def get_course(guid=None, courseNumber=None):
  """
    Returns a course record
  """
  if guid == None and courseNumber == None:
    return None

  course = None

  query = "SELECT * FROM Courses WHERE CourseNumber='{}'".format(courseNumber)
  # prefer to look up course by ID when possible
  if guid != None:
    query = "SELECT * FROM Courses WHERE ID='{}'".format(guid)

  sql = db_connect()
  count = sql.execute(query)

  if count == 1:
    course = sql.fetchone()
  sql.close()

  return course

def mod_course(guid, courseNum):
  """
    Changes a course record
  """
  pass

def del_course(guid):
  """
    Deletes a course from the database
  """
  pass


####################
# Assignment functions
####################

def all_assignments():
  ret = []
  return ret

def add_assignment(name, semester, parts, points):
  pass

def get_assignment(guid):
  pass

def mod_assignment(guid, name, semester, parts, points):
  pass

def del_assignment(guid):
  pass


####################
# User functions
# Users table:
# CREATE TABLE Grading.Users(
#   NetID Char(8) NOT NULL,
#   LastName Varchar(32) NOT NULL,
#   FirstName Varchar(64) NOT NULL,
#   pwHash Char(64),
#   pwSalt Char(64),
#   PRIMARY KEY(NetID),
#   INDEX (LastName)
# ) ENGINE=InnoDB;
####################

def hash_password(password):
  """
    Return a tuple (pwHash, pwSalt) hashed from `password`
  """
  pwSalt = sha256(str(datetime.now()).encode('utf-8')).hexdigest()
  pwHash = sha256((password + pwSalt).encode('utf-8')).hexdigest()
  return (pwHash, pwSalt)

def all_users():
  sql = db_connect()
  sql.execute("SELECT * FROM Users ORDER BY NetID")
  ret = sql.fetchall()

  sql.close()
  return ret

def add_user(netID, last_name, first_name, password):
  """
    Add a new user to the database
  """
  pwHash, pwSalt = hash_password(password)

  cols = "NetID, LastName, FirstName, pwHash, pwSalt"
  vals = '"{}", "{}", "{}", "{}", "{}"'.format(netID, last_name, first_name, pwHash, pwSalt)
  query = "INSERT INTO Users ({}) VALUES({})".format(cols, vals)

  sql = db_connect()
  try:
    ret = True if sql.execute(query) == 1 else False
  except Error as e:
    ret = False

  sql.close()
  return ret

def get_user(netID):
  """
    Retrieve a user from the database
  """
  u = None

  sql = db_connect()
  sql.execute("SELECT * FROM Users WHERE NetID='{}'".format(netID))
  if sql.rowcount == 1:
    u = sql.fetchone()
    del u["pwHash"]
    del u["pwSalt"]

  return u

def mod_user(netID=None, last_name=None, first_name=None, password=None):
  """
    Update the user with the changed information
  """
  if not netID:
    return

  query = "UPDATE Users SET "
  if last_name:
    query += "LastName='{}' ".format(last_name)

  if first_name:
    query += "FirstName='{}' ".format(first_name)

  if password:
    pwHash, pwSalt = hash_password(password)
    query += "pwHash='{}' pwSalt='{}' ".format(pwHash, pwSalt)

  query += "WHERE NetID='{}'".format(netID)

  sql = db_connect()
  sql.execute(query)
  sql.close()

def del_user(netID):
  """
    Deletes a user from the database
  """
  sql = db_connect()
  sql.execute("DELETE FROM Users WHERE NetID='{}'".format(netID))
  sql.close()


####################
# Grade functions
####################

def add_grade(assignment_uuid, netID, part, points):
  pass

def mod_grade(assignment_uuid, netID, part, points):
  pass

def del_grade(assignment_uuid, netID):
  pass


####################
# Security functions
####################

def auth_user(netID, passwordText):
  user = None

  sql = db_connect()
  cnt = sql.execute("SELECT * FROM Users WHERE NetID='{}'".format(netID))

  if cnt == 1:
    user = sql.fetchone()
    sql.close()

    pwHash = sha256((passwordText + user["pwSalt"]).encode('utf-8')).hexdigest()
    if pwHash != user["pwHash"]:
      print('username/password combination not recognized')
      user = None

  return user

